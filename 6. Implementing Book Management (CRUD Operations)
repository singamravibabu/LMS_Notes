## 6: Implementing Book Management (CRUD Operations)  

Now that the database connection is set up, Student 1 will implement **Book Management**, which includes adding, updating, deleting, and retrieving book details.  

---

### **Instructions for Student 1 (Book Management CRUD)**  

1. **Open the `backend/book.py` file**  
   - This file will handle all operations related to books.  

2. **Write the CRUD Functions**  
   - Add the following code to `backend/book.py`:  

   ```python
   from database.db_connection import get_db_connection

   class Book:
       def __init__(self, title, author, isbn, total_copies):
           self.title = title
           self.author = author
           self.isbn = isbn
           self.total_copies = total_copies

       @staticmethod
       def add_book(title, author, isbn, total_copies):
           """Adds a new book to the database"""
           conn = get_db_connection()
           if conn:
               cursor = conn.cursor()
               query = "INSERT INTO books (title, author, isbn, total_copies, available_copies) VALUES (%s, %s, %s, %s, %s)"
               values = (title, author, isbn, total_copies, total_copies)
               cursor.execute(query, values)
               conn.commit()
               conn.close()
               print("Book added successfully!")

       @staticmethod
       def update_book(book_id, title=None, author=None, isbn=None, total_copies=None):
           """Updates book details in the database"""
           conn = get_db_connection()
           if conn:
               cursor = conn.cursor()
               updates = []
               values = []

               if title:
                   updates.append("title = %s")
                   values.append(title)
               if author:
                   updates.append("author = %s")
                   values.append(author)
               if isbn:
                   updates.append("isbn = %s")
                   values.append(isbn)
               if total_copies:
                   updates.append("total_copies = %s")
                   values.append(total_copies)

               if updates:
                   query = f"UPDATE books SET {', '.join(updates)} WHERE book_id = %s"
                   values.append(book_id)
                   cursor.execute(query, values)
                   conn.commit()

               conn.close()
               print("Book updated successfully!")

       @staticmethod
       def delete_book(book_id):
           """Deletes a book from the database"""
           conn = get_db_connection()
           if conn:
               cursor = conn.cursor()
               query = "DELETE FROM books WHERE book_id = %s"
               cursor.execute(query, (book_id,))
               conn.commit()
               conn.close()
               print("Book deleted successfully!")

       @staticmethod
       def get_all_books():
           """Retrieves all books from the database"""
           conn = get_db_connection()
           if conn:
               cursor = conn.cursor()
               query = "SELECT * FROM books"
               cursor.execute(query)
               books = cursor.fetchall()
               conn.close()
               return books

   # Test the functionality
   if __name__ == "__main__":
       Book.add_book("Python Programming", "John Doe", "1234567890", 5)
       books = Book.get_all_books()
       print(books)
   ```

3. **Test the Book Management Functions**  
   - Run the script:  
     ```bash
     python backend/book.py
     ```
   - Check if the book is added to the database.  

4. **Commit and Push Changes to GitHub**  
   ```bash
   git add backend/book.py
   git commit -m "Implemented Book Management CRUD"
   git push origin main
   ```

---

### **Instructions for All Students**  
- **Pull the latest changes:**  
  ```bash
  git pull origin main
  ```
- **Run the test script** and confirm that books are being added and retrieved correctly.

Once this is done, let me know, and we will proceed to the next step! ðŸš€
